# Display the plot
print(netflix_plot)
# Create a bar plot to visualize the distribution of Netflix shows based on their ratings and show count, grouped by show type
ggplot(data = netflix_dataset, aes(x = rating, fill = rating)) +
geom_bar() +  # Add bars to the plot
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Distribution of Netflix Shows by Rating and Show Count for Different Show Types",
x = "Rating",
y = "Count of Shows")  # Set plot titles and labels
# Create a boxplot to explore the relationship between the duration of Netflix shows
# and the year they were aired on Netflix, focusing on shows aired after 2005.
ggplot(data = netflix_dataset[which(netflix_dataset$release_year > 2005), ],
aes(x = as.factor(aired_on_netflix_year), y = duration)) +
geom_boxplot() +  # Add boxplot for visualizing the distribution
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Relationship between Show Duration and Netflix Airing Year",
x = "Year Aired on Netflix",
y = "Show Duration")  # Set plot titles and labels
# install.packages(c("readr", "tidyverse"))
library(tidyverse)
library(readr)
library(dplyr)
library(stringr)
data <- read.csv(file = "26801-0001-Data.tsv", sep = "\t", na = c(-99))
data %>%
pivot_longer(cols = starts_with("APR_RATE_"), names_to = "YEAR", values_to = "APR") %>%
select(SCL_UNITID, SCL_NAME, SPORT_CODE, SPORT_NAME, YEAR, APR) %>%
mutate(YEAR = str_sub(YEAR, 10, 13)) -> data
print(data)
ggplot(data, aes(x = YEAR, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution From 2004 - 2014") +
xlab("Year") +
ylab("APR") +
theme_minimal()
data %>%
filter(SPORT_CODE >= 1 & SPORT_CODE <= 37) %>%
mutate(GENDER= ifelse(SPORT_CODE >= 1 & SPORT_CODE <= 18, "Men", "Women")) -> data
ggplot(data, aes(x = YEAR, y = APR, color=GENDER)) +
geom_boxplot(na.rm=TRUE) +
ggtitle("APR Distribution Over Time by Gender Division") +
xlab("Year") +
ylab("APR") +
theme_minimal()
library(stringr)
data <- mutate(data,SPORT_NAME = str_remove(SPORT_NAME, "^Men's |^Women's "))
ggplot(data, aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Distribution of APRs by Sport and Gender",
x = "Sport",
y = "APR",
fill = "Gender")
data %>%
filter(GENDER == "Men") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution for Men's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
# install.packages("readr")
# install.packages("dplyr")
library(dplyr)
library("readr")
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
library(dplyr)
library(lubridate)
# Convert the "date_added" column to a consistent format using lubridate
netflix_dataset <- netflix_dataset %>%
mutate(date_added = lubridate::ymd(date_added))
# Filter out entries with future dates in the "date_added" column
netflix_dataset <- netflix_dataset %>%
filter(date_added < Sys.Date())
# Replace extremely short durations (1-10 mins) with the mean duration
netflix_dataset$duration[netflix_dataset$duration < 10] <- as.integer(mean(netflix_dataset$duration))
# Replace NA values in the "rating" column with 'Unknown'
netflix_dataset$rating[is.na(netflix_dataset$rating)] <- 'Unknown'
# Create a new column named "aired_on_netflix_year" by extracting the year from the "date_added" column
netflix_dataset$aired_on_netflix_year <- as.double(str_sub(netflix_dataset$date_added, start = 0, end = 4))
# Display the transformed dataframe, and observe the changes made in the "date_added" column
tibble(netflix_dataset)
library(ggplot2)
# Create a bar plot to display the distribution of Netflix shows by release year and type
netflix_plot <- ggplot(data = netflix_dataset[netflix_dataset$release_year > 2005, ],
aes(x = release_year, fill = type)) +
geom_bar() +  # Add bars to represent the count
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for readability
labs(title = "Distribution of Netflix Shows by Type and Release Year",
x = "Release Year",
y = "Count",
fill = "Type of Netflix Show")  # Set plot titles and labels
# Display the plot
print(netflix_plot)
# Create a bar plot to visualize the distribution of Netflix shows based on their ratings and show count, grouped by show type
ggplot(data = netflix_dataset, aes(x = rating, fill = rating)) +
geom_bar() +  # Add bars to the plot
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Distribution of Netflix Shows by Rating and Show Count for Different Show Types",
x = "Rating",
y = "Count of Shows")  # Set plot titles and labels
# Create a boxplot to explore the relationship between the duration of Netflix shows
# and the year they were aired on Netflix, focusing on shows aired after 2005.
ggplot(data = netflix_dataset[which(netflix_dataset$release_year > 2005), ],
aes(x = as.factor(aired_on_netflix_year), y = duration)) +
geom_boxplot() +  # Add boxplot for visualizing the distribution
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Relationship between Show Duration and Netflix Airing Year",
x = "Year Aired on Netflix",
y = "Show Duration")  # Set plot titles and labels
# install.packages(c("readr", "tidyverse"))
library(tidyverse)
library(readr)
library(dplyr)
library(stringr)
data <- read.csv(file = "26801-0001-Data.tsv", sep = "\t", na = c(-99))
data %>%
pivot_longer(cols = starts_with("APR_RATE_"), names_to = "YEAR", values_to = "APR") %>%
select(SCL_UNITID, SCL_NAME, SPORT_CODE, SPORT_NAME, YEAR, APR) %>%
mutate(YEAR = str_sub(YEAR, 10, 13)) -> data
print(data)
ggplot(data, aes(x = YEAR, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution From 2004 - 2014") +
xlab("Year") +
ylab("APR") +
theme_minimal()
data %>%
filter(SPORT_CODE >= 1 & SPORT_CODE <= 37) %>%
mutate(GENDER= ifelse(SPORT_CODE >= 1 & SPORT_CODE <= 18, "Men", "Women")) -> data
ggplot(data, aes(x = YEAR, y = APR, color=GENDER)) +
geom_boxplot(na.rm=TRUE) +
ggtitle("APR Distribution Over Time by Gender Division") +
xlab("Year") +
ylab("APR") +
theme_minimal()
library(stringr)
data <- mutate(data,SPORT_NAME = str_remove(SPORT_NAME, "^Men's |^Women's "))
ggplot(data, aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Distribution of APRs by Sport and Gender",
x = "Sport",
y = "APR",
fill = "Gender")
data %>%
filter(GENDER == "Men") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution of Men's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
# install.packages("readr")
# install.packages("dplyr")
library(dplyr)
library("readr")
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
library(dplyr)
library(lubridate)
# Convert the "date_added" column to a consistent format using lubridate
netflix_dataset <- netflix_dataset %>%
mutate(date_added = lubridate::ymd(date_added))
# Filter out entries with future dates in the "date_added" column
netflix_dataset <- netflix_dataset %>%
filter(date_added < Sys.Date())
# Replace extremely short durations (1-10 mins) with the mean duration
netflix_dataset$duration[netflix_dataset$duration < 10] <- as.integer(mean(netflix_dataset$duration))
# Replace NA values in the "rating" column with 'Unknown'
netflix_dataset$rating[is.na(netflix_dataset$rating)] <- 'Unknown'
# Create a new column named "aired_on_netflix_year" by extracting the year from the "date_added" column
netflix_dataset$aired_on_netflix_year <- as.double(str_sub(netflix_dataset$date_added, start = 0, end = 4))
# Display the transformed dataframe, and observe the changes made in the "date_added" column
tibble(netflix_dataset)
library(ggplot2)
# Create a bar plot to display the distribution of Netflix shows by release year and type
netflix_plot <- ggplot(data = netflix_dataset[netflix_dataset$release_year > 2005, ],
aes(x = release_year, fill = type)) +
geom_bar() +  # Add bars to represent the count
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for readability
labs(title = "Distribution of Netflix Shows by Type and Release Year",
x = "Release Year",
y = "Count",
fill = "Type of Netflix Show")  # Set plot titles and labels
# Display the plot
print(netflix_plot)
# Create a bar plot to visualize the distribution of Netflix shows based on their ratings and show count, grouped by show type
ggplot(data = netflix_dataset, aes(x = rating, fill = rating)) +
geom_bar() +  # Add bars to the plot
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Distribution of Netflix Shows by Rating and Show Count for Different Show Types",
x = "Rating",
y = "Count of Shows")  # Set plot titles and labels
# Create a boxplot to explore the relationship between the duration of Netflix shows
# and the year they were aired on Netflix, focusing on shows aired after 2005.
ggplot(data = netflix_dataset[which(netflix_dataset$release_year > 2005), ],
aes(x = as.factor(aired_on_netflix_year), y = duration)) +
geom_boxplot() +  # Add boxplot for visualizing the distribution
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Relationship between Show Duration and Netflix Airing Year",
x = "Year Aired on Netflix",
y = "Show Duration")  # Set plot titles and labels
# install.packages(c("readr", "tidyverse"))
library(tidyverse)
library(readr)
library(dplyr)
library(stringr)
data <- read.csv(file = "26801-0001-Data.tsv", sep = "\t", na = c(-99))
data %>%
pivot_longer(cols = starts_with("APR_RATE_"), names_to = "YEAR", values_to = "APR") %>%
select(SCL_UNITID, SCL_NAME, SPORT_CODE, SPORT_NAME, YEAR, APR) %>%
mutate(YEAR = str_sub(YEAR, 10, 13)) -> data
print(data)
ggplot(data, aes(x = YEAR, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution From 2004 - 2014") +
xlab("Year") +
ylab("APR") +
theme_minimal()
data %>%
filter(SPORT_CODE >= 1 & SPORT_CODE <= 37) %>%
mutate(GENDER= ifelse(SPORT_CODE >= 1 & SPORT_CODE <= 18, "Men", "Women")) -> data
ggplot(data, aes(x = YEAR, y = APR, color=GENDER)) +
geom_boxplot(na.rm=TRUE) +
ggtitle("APR Distribution Over Time by Gender Division") +
xlab("Year") +
ylab("APR") +
theme_minimal()
library(stringr)
data <- mutate(data,SPORT_NAME = str_remove(SPORT_NAME, "^Men's |^Women's "))
ggplot(data, aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Distribution of APRs by Sport and Gender",
x = "Sport",
y = "APR",
fill = "Gender")
data %>%
filter(GENDER == "Men") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution of Men's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
# install.packages("readr")
# install.packages("dplyr")
library(dplyr)
library("readr")
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
library(dplyr)
library(lubridate)
# Convert the "date_added" column to a consistent format using lubridate
netflix_dataset <- netflix_dataset %>%
mutate(date_added = lubridate::ymd(date_added))
# Filter out entries with future dates in the "date_added" column
netflix_dataset <- netflix_dataset %>%
filter(date_added < Sys.Date())
# Replace extremely short durations (1-10 mins) with the mean duration
netflix_dataset$duration[netflix_dataset$duration < 10] <- as.integer(mean(netflix_dataset$duration))
# Replace NA values in the "rating" column with 'Unknown'
netflix_dataset$rating[is.na(netflix_dataset$rating)] <- 'Unknown'
# Create a new column named "aired_on_netflix_year" by extracting the year from the "date_added" column
netflix_dataset$aired_on_netflix_year <- as.double(str_sub(netflix_dataset$date_added, start = 0, end = 4))
# Display the transformed dataframe, and observe the changes made in the "date_added" column
tibble(netflix_dataset)
library(ggplot2)
# Create a bar plot to display the distribution of Netflix shows by release year and type
netflix_plot <- ggplot(data = netflix_dataset[netflix_dataset$release_year > 2005, ],
aes(x = release_year, fill = type)) +
geom_bar() +  # Add bars to represent the count
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for readability
labs(title = "Distribution of Netflix Shows by Type and Release Year",
x = "Release Year",
y = "Count",
fill = "Type of Netflix Show")  # Set plot titles and labels
# Display the plot
print(netflix_plot)
# Create a bar plot to visualize the distribution of Netflix shows based on their ratings and show count, grouped by show type
ggplot(data = netflix_dataset, aes(x = rating, fill = rating)) +
geom_bar() +  # Add bars to the plot
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Distribution of Netflix Shows by Rating and Show Count for Different Show Types",
x = "Rating",
y = "Count of Shows")  # Set plot titles and labels
# Create a boxplot to explore the relationship between the duration of Netflix shows
# and the year they were aired on Netflix, focusing on shows aired after 2005.
ggplot(data = netflix_dataset[which(netflix_dataset$release_year > 2005), ],
aes(x = as.factor(aired_on_netflix_year), y = duration)) +
geom_boxplot() +  # Add boxplot for visualizing the distribution
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Relationship between Show Duration and Netflix Airing Year",
x = "Year Aired on Netflix",
y = "Show Duration")  # Set plot titles and labels
# install.packages(c("readr", "tidyverse"))
library(tidyverse)
library(readr)
library(dplyr)
library(stringr)
data <- read.csv(file = "26801-0001-Data.tsv", sep = "\t", na = c(-99))
data %>%
pivot_longer(cols = starts_with("APR_RATE_"), names_to = "YEAR", values_to = "APR") %>%
select(SCL_UNITID, SCL_NAME, SPORT_CODE, SPORT_NAME, YEAR, APR) %>%
mutate(YEAR = str_sub(YEAR, 10, 13)) -> data
print(data)
ggplot(data, aes(x = YEAR, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution From 2004 - 2014") +
xlab("Year") +
ylab("APR") +
theme_minimal()
data %>%
filter(SPORT_CODE >= 1 & SPORT_CODE <= 37) %>%
mutate(GENDER= ifelse(SPORT_CODE >= 1 & SPORT_CODE <= 18, "Men", "Women")) -> data
ggplot(data, aes(x = YEAR, y = APR, color=GENDER)) +
geom_boxplot(na.rm=TRUE) +
ggtitle("APR Distribution Over Time by Gender Division") +
xlab("Year") +
ylab("APR") +
theme_minimal()
library(stringr)
data <- mutate(data,SPORT_NAME = str_remove(SPORT_NAME, "^Men's |^Women's "))
ggplot(data, aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Distribution of APRs by Sport and Gender",
x = "Sport",
y = "APR",
fill = "Gender")
data %>%
filter(GENDER == "Men") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution of Men's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
data %>%
filter(GENDER == "Women") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution of Women's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
# install.packages("readr")
# install.packages("dplyr")
library(dplyr)
library("readr")
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
#  Citing source of dataset: https://www.kaggle.com/datasets/senapatirajesh/netflix-tv-shows-and-movies?select=NetFlix.csv
netflix_dataset <- read_csv("NetFlix.csv", na = c(""))
tibble(netflix_dataset)
library(dplyr)
library(lubridate)
# Convert the "date_added" column to a consistent format using lubridate
netflix_dataset <- netflix_dataset %>%
mutate(date_added = lubridate::ymd(date_added))
# Filter out entries with future dates in the "date_added" column
netflix_dataset <- netflix_dataset %>%
filter(date_added < Sys.Date())
# Replace extremely short durations (1-10 mins) with the mean duration
netflix_dataset$duration[netflix_dataset$duration < 10] <- as.integer(mean(netflix_dataset$duration))
# Replace NA values in the "rating" column with 'Unknown'
netflix_dataset$rating[is.na(netflix_dataset$rating)] <- 'Unknown'
# Create a new column named "aired_on_netflix_year" by extracting the year from the "date_added" column
netflix_dataset$aired_on_netflix_year <- as.double(str_sub(netflix_dataset$date_added, start = 0, end = 4))
# Display the transformed dataframe, and observe the changes made in the "date_added" column
tibble(netflix_dataset)
library(dplyr)
library(lubridate)
# Convert the "date_added" column to a consistent format using lubridate
netflix_dataset <- netflix_dataset %>%
mutate(date_added = lubridate::ymd(date_added))
# Filter out entries with future dates in the "date_added" column
netflix_dataset <- netflix_dataset %>%
filter(date_added < Sys.Date())
# Replace extremely short durations (1-10 mins) with the mean duration
netflix_dataset$duration[netflix_dataset$duration < 10] <- as.integer(mean(netflix_dataset$duration))
# Replace NA values in the "rating" column with 'Unknown'
netflix_dataset$rating[is.na(netflix_dataset$rating)] <- 'Unknown'
# Create a new column named "aired_on_netflix_year" by extracting the year from the "date_added" column
netflix_dataset$aired_on_netflix_year <- as.double(str_sub(netflix_dataset$date_added, start = 0, end = 4))
# Display the transformed dataframe, and observe the changes made in the "date_added" column
tibble(netflix_dataset)
library(ggplot2)
# Create a bar plot to display the distribution of Netflix shows by release year and type
netflix_plot <- ggplot(data = netflix_dataset[netflix_dataset$release_year > 2005, ],
aes(x = release_year, fill = type)) +
geom_bar() +  # Add bars to represent the count
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels for readability
labs(title = "Distribution of Netflix Shows by Type and Release Year",
x = "Release Year",
y = "Count",
fill = "Type of Netflix Show")  # Set plot titles and labels
# Display the plot
print(netflix_plot)
# Create a bar plot to visualize the distribution of Netflix shows based on their ratings and show count, grouped by show type
ggplot(data = netflix_dataset, aes(x = rating, fill = rating)) +
geom_bar() +  # Add bars to the plot
facet_wrap(~type, ncol = 1) +  # Separate plots by show type
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Distribution of Netflix Shows by Rating and Show Count for Different Show Types",
x = "Rating",
y = "Count of Shows")  # Set plot titles and labels
# Create a boxplot to explore the relationship between the duration of Netflix shows
# and the year they were aired on Netflix, focusing on shows aired after 2005.
ggplot(data = netflix_dataset[which(netflix_dataset$release_year > 2005), ],
aes(x = as.factor(aired_on_netflix_year), y = duration)) +
geom_boxplot() +  # Add boxplot for visualizing the distribution
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
labs(title = "Relationship between Show Duration and Netflix Airing Year",
x = "Year Aired on Netflix",
y = "Show Duration")  # Set plot titles and labels
# install.packages(c("readr", "tidyverse"))
library(tidyverse)
library(readr)
library(dplyr)
library(stringr)
data <- read.csv(file = "26801-0001-Data.tsv", sep = "\t", na = c(-99))
data %>%
pivot_longer(cols = starts_with("APR_RATE_"), names_to = "YEAR", values_to = "APR") %>%
select(SCL_UNITID, SCL_NAME, SPORT_CODE, SPORT_NAME, YEAR, APR) %>%
mutate(YEAR = str_sub(YEAR, 10, 13)) -> data
print(data)
ggplot(data, aes(x = YEAR, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution From 2004 - 2014") +
xlab("Year") +
ylab("APR") +
theme_minimal()
data %>%
filter(SPORT_CODE >= 1 & SPORT_CODE <= 37) %>%
mutate(GENDER= ifelse(SPORT_CODE >= 1 & SPORT_CODE <= 18, "Men", "Women")) -> data
ggplot(data, aes(x = YEAR, y = APR, color=GENDER)) +
geom_boxplot(na.rm=TRUE) +
ggtitle("APR Distribution Over Time by Gender Division") +
xlab("Year") +
ylab("APR") +
theme_minimal()
library(stringr)
data <- mutate(data,SPORT_NAME = str_remove(SPORT_NAME, "^Men's |^Women's "))
ggplot(data, aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Distribution of APRs by Sport and Gender",
x = "Sport",
y = "APR",
fill = "Gender")
data %>%
filter(GENDER == "Men") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution of Men's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
data %>%
filter(GENDER == "Women") %>%
ggplot(aes(x = SPORT_NAME, y = APR)) +
geom_boxplot(na.rm = TRUE) +
ggtitle("APR Distribution of Women's Sports") +
xlab("Sport") +
ylab("APR") +
theme_minimal() +
coord_flip()
