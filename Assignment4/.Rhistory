add_residuals(new_model1, "resid") %>%
ggplot(aes(x = NONDISCLOSURE_I)) +
geom_point(aes(y = resid), alpha = 0.35) +
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +
labs(x = "Non-disclosure of gender identity", y = "Residuals") +
ggtitle("Non-disclosure of gender identity vs Residuals") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
my_data %>%
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = HCTHREAT_I)) +
geom_point(aes(y = resid), alpha = 0.35) +
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +
labs(x = "Healthcare stereotype threat", y = "Residuals") +
ggtitle("Healthcare stereotype threat vs Residuals") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
my_data %>%
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = EVERYDAY_I)) +
geom_point(aes(y = resid), alpha = 0.35) +
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +
labs(x = "Everyday discrimination", y = "Residuals") +
ggtitle("Everyday discrimination vs Residuals") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Plotting the relationship between Social well-being (SOCIALWB_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = SOCIALWB_I)) +  # X-axis: Social well-being
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Social well-being", y = "Residuals") +  # Labels for axes
ggtitle("Social well-being vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Non-affirmation of gender identity (NONAFFIRM_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = NONAFFIRM_I)) +  # X-axis: Non-affirmation of gender identity
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Non-affirmation of gender identity", y = "Residuals") +  # Labels for axes
ggtitle("Non-affirmation of gender identity vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Non-disclosure of gender identity (NONDISCLOSURE_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = NONDISCLOSURE_I)) +  # X-axis: Non-disclosure of gender identity
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Non-disclosure of gender identity", y = "Residuals") +  # Labels for axes
ggtitle("Non-disclosure of gender identity vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Healthcare stereotype threat (HCTHREAT_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = HCTHREAT_I)) +  # X-axis: Healthcare stereotype threat
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Healthcare stereotype threat", y = "Residuals") +  # Labels for axes
ggtitle("Healthcare stereotype threat vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Everyday discrimination (EVERYDAY_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = EVERYDAY_I)) +  # X-axis: Everyday discrimination
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Everyday discrimination", y = "Residuals") +  # Labels for axes
ggtitle("Everyday discrimination vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between the combination of Mental distress/disorder (KESSLER6_I) and Social well-being (SOCIALWB_I) and Residuals
my_data %>%
# Adding residuals from model2 to the dataset
add_residuals(model2, "resid") %>%
ggplot(aes(x = KESSLER6_I + SOCIALWB_I)) +  # X-axis: Combination of Mental distress/disorder and Social well-being
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
labs(x = "Mental distress/disorder + Social well-being", y = "Residuals") +  # Labels for axes
ggtitle("Mental distress/disorder + Social well-being vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Creating a QQ plot to assess the normality of residuals from model2
my_data %>%
# Adding residuals from model2 to the dataset
add_residuals(model2, "resid") %>%
ggplot(aes(sample=resid)) +  # Q-Q plot with residuals as sample
geom_qq() +  # Adding the quantile-quantile plot
ggtitle("QQPlot") +  # Title for the plot
theme_minimal() +  # Applying a minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centering the title
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
suppressPackageStartupMessages(library(dplyr))  # Suppress library startup messages
library(ggplot2)  # Load ggplot2 library
# Load the dataset
load("37938-0001-Data.rda")
my_data <- da37938.0001  # Assign dataset to my_data variable
# Recode race categories for clarity
my_data <- my_data %>%
mutate(RACE = recode(RACE,
"(1) Asian" = "Asian",
"(2) Black/AA" = "Black",
"(3) Hispanic/Latino" = "Hispanic",
"(4) Middle Eastern" = "Middle Eastern",
"(5) Native Hawaiian/Pacific Islander" = "Native Hawaiian",
"(6) White" = "White",
"(7) American Indian" = "American Indian",
"(8) Multirace" = "Multirace",
"(9) Other" = "Other"))
# Calculate unweighted proportions by race
unweighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = n()) %>%
mutate(Type = "Unweighted", prop = count / sum(count))
# Calculate weighted proportions by race
weighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = sum(WEIGHT)) %>%
mutate(Type = "Weighted", prop = count / sum(my_data$WEIGHT))
# Combine unweighted and weighted proportions
combined_props <- bind_rows(unweighted_props, weighted_props)
# Create a bar plot showing proportions by race/ethnicity
ggplot(combined_props, aes(x = RACE, y = prop, fill = Type)) +
geom_col(position = position_dodge()) +  # Plot bars with dodge positioning
ggtitle("Proportions by Race/Ethnicity") +  # Set plot title
xlab("Race/Ethnicity") +  # Set x-axis label
ylab("Proportion") +  # Set y-axis label
theme_minimal() +  # Set minimal theme for the plot
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5))  # Center plot title
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
suppressPackageStartupMessages(library(dplyr))  # Suppress library startup messages
library(ggplot2)  # Load ggplot2 library
# Load the dataset
load("37938-0001-Data.rda")
my_data <- da37938.0001  # Assign dataset to my_data variable
# Recode race categories for clarity
my_data <- my_data %>%
mutate(RACE = recode(RACE,
"(1) Asian" = "Asian",
"(2) Black/AA" = "Black",
"(3) Hispanic/Latino" = "Hispanic",
"(4) Middle Eastern" = "Middle Eastern",
"(5) Native Hawaiian/Pacific Islander" = "Native Hawaiian",
"(6) White" = "White",
"(7) American Indian" = "American Indian",
"(8) Multirace" = "Multirace",
"(9) Other" = "Other"))
# Calculate unweighted proportions by race
unweighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = n()) %>%
mutate(Type = "Unweighted", prop = count / sum(count))
# Calculate weighted proportions by race
weighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = sum(WEIGHT)) %>%
mutate(Type = "Weighted", prop = count / sum(my_data$WEIGHT))
# Combine unweighted and weighted proportions
combined_props <- bind_rows(unweighted_props, weighted_props)
# Create a bar plot showing proportions by race/ethnicity
ggplot(combined_props, aes(x = RACE, y = prop, fill = Type)) +
geom_col(position = position_dodge()) +  # Plot bars with dodge positioning
ggtitle("Proportions by Race/Ethnicity") +  # Set plot title
xlab("Race/Ethnicity") +  # Set x-axis label
ylab("Proportion") +  # Set y-axis label
theme_minimal() +  # Set minimal theme for the plot
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5))  # Center plot title
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
suppressPackageStartupMessages(library(dplyr))  # Suppress library startup messages
library(ggplot2)  # Load ggplot2 library
# Load the dataset
load("37938-0001-Data.rda")
my_data <- da37938.0001  # Assign dataset to my_data variable
# Recode race categories for clarity
my_data <- my_data %>%
mutate(RACE = recode(RACE,
"(1) Asian" = "Asian",
"(2) Black/AA" = "Black",
"(3) Hispanic/Latino" = "Hispanic",
"(4) Middle Eastern" = "Middle Eastern",
"(5) Native Hawaiian/Pacific Islander" = "Native Hawaiian",
"(6) White" = "White",
"(7) American Indian" = "American Indian",
"(8) Multirace" = "Multirace",
"(9) Other" = "Other"))
# Calculate unweighted proportions by race
unweighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = n()) %>%
mutate(Type = "Unweighted", prop = count / sum(count))
# Calculate weighted proportions by race
weighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = sum(WEIGHT)) %>%
mutate(Type = "Weighted", prop = count / sum(my_data$WEIGHT))
# Combine unweighted and weighted proportions
combined_props <- bind_rows(unweighted_props, weighted_props)
# Create a bar plot showing proportions by race/ethnicity
ggplot(combined_props, aes(x = RACE, y = prop, fill = Type)) +
geom_col(position = position_dodge()) +  # Plot bars with dodge positioning
ggtitle("Proportions by Race/Ethnicity") +  # Set plot title
xlab("Race/Ethnicity") +  # Set x-axis label
ylab("Proportion") +  # Set y-axis label
theme_minimal() +  # Set minimal theme for the plot
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5))  # Center plot title
suppressPackageStartupMessages(library(dplyr))
library(ggplot2)
# Load the dataset
load("37938-0001-Data.rda")
my_data <- da37938.0001  # Assign dataset to my_data variable
# Filter out rows with missing values in the SEXUALID column
my_data <- my_data %>%
filter(!is.na(SEXUALID))
# Recode sexual orientation categories for clarity
my_data <- my_data %>%
mutate(SEXUALID = recode(SEXUALID,
"(1) Straight/heterosexual" = "Heterosexual",
"(2) Lesbian" = "Lesbian",
"(3) Gay" = "Gay",
"(4) Bisexual" = "Bisexual",
"(5) Queer" = "Queer",
"(6) Same-gender loving" = "Homosexuals",
"(7) Other" = "Other",
"(8) Asexual spectrum" = "Asexual",
"(9) Pansexual" = "Pansexual"))
# Calculate unweighted proportions by sexual orientation
unweighted_props <- my_data %>%
group_by(SEXUALID) %>%
summarize(count = n()) %>%
mutate(Type = "Unweighted", prop = count / sum(count))
# Calculate weighted proportions by sexual orientation
weighted_props <- my_data %>%
group_by(SEXUALID) %>%
summarize(count = sum(WEIGHT))%>%
mutate(Type = "Weighted", prop = count / sum(my_data$WEIGHT))
# Combine unweighted and weighted proportions
combined_props <- bind_rows(unweighted_props, weighted_props)
# Create a bar plot showing proportions by sexual orientation
ggplot(combined_props, aes(x = SEXUALID, y = prop, fill = Type)) +
geom_col(position = position_dodge()) +  # Plot bars with dodge positioning
ggtitle("Proportions by Sexual Orientations") +  # Set plot title
xlab("Sexual Orientation") +  # Set x-axis label
ylab("Proportion") +  # Set y-axis label
theme_minimal() +  # Set minimal theme for the plot
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5))  # Center plot title
suppressPackageStartupMessages(library(dplyr))
library(ggplot2)
load("37938-0001-Data.rda")
# Assign dataset to my_data variable
my_data <- da37938.0001
# Select relevant columns from the dataset
my_data <- my_data %>%
select(STUDYID, LIFESAT, LIFESAT_I, SOCIALWB, SOCIALWB_I,
NONAFFIRM, NONAFFIRM_I, NONDISCLOSURE,
NONDISCLOSURE_I, HCTHREAT, HCTHREAT_I,
KESSLER6, KESSLER6_I, EVERYDAY, EVERYDAY_I)
# Remove rows with missing values
my_data <- na.omit(my_data)
# Create a scatter plot to visualize the relationship between satisfaction with life and social well-being
ggplot(my_data, aes(x = SOCIALWB_I, y = LIFESAT_I)) +  # Define x and y variables
geom_point() +  # Plot points
geom_smooth(se = FALSE, method = 'lm', formula = 'y ~ x', color="red") +  # Add linear regression line
geom_smooth(method = 'loess', color = "blue", formula = 'y ~ x') +  # Add smoothed line
labs(x = "Social well-being", y = "Satisfaction with life") +  # Set x and y axis labels
ggtitle("Satisfaction with life vs Social well-being") +  # Set plot title
theme_minimal() +  # Set minimal theme for the plot
theme(plot.title = element_text(hjust = 0.5))  # Center plot title
# Plot relationship between non-affirmation of gender identity and life satisfaction
ggplot(my_data, aes(x = NONAFFIRM_I, y = LIFESAT_I)) +
geom_point() +
geom_smooth(se = FALSE, method = 'lm', formula = 'y ~ x', color="red") +
geom_smooth(method = 'loess', color = "blue", formula = 'y ~ x') +
labs(x = "Non-affirmation of gender identity", y = "Satisfaction with life") +
ggtitle("Non-affirmation of gender identity vs Satisfaction with life") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Plot relationship between non-disclosure of gender identity and life satisfaction
ggplot(my_data, aes(x = NONDISCLOSURE_I, y = LIFESAT_I)) +
geom_point() +
geom_smooth(se = FALSE, method = 'lm', formula = 'y ~ x', color="red") +
geom_smooth(method = 'loess', color = "blue", formula = 'y ~ x') +
labs(x = "Non-disclosure of gender identity", y = "Satisfaction with life") +
ggtitle("Non-disclosure of gender identity vs Satisfaction with life") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Plot relationship between healthcare stereotype threat and life satisfaction
ggplot(my_data, aes(x = HCTHREAT_I, y = LIFESAT_I)) +
geom_point() +
geom_smooth(se = FALSE, method = 'lm', formula = 'y ~ x', color="red") +
geom_smooth(method = 'loess', color = "blue", formula = 'y ~ x') +
labs(x = "Healthcare stereotype threat", y = "Satisfaction with life") +
ggtitle("Healthcare stereotype threat vs Satisfaction with life") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Plot relationship between mental distress/disorder and life satisfaction
ggplot(my_data, aes(x = KESSLER6_I, y = LIFESAT_I)) +
geom_point() +
geom_smooth(se = FALSE, method = 'lm', formula = 'y ~ x', color="red") +
geom_smooth(method = 'loess', color = "blue", formula = 'y ~ x') +
labs(x = "Mental distress/disorder", y = "Satisfaction with life") +
ggtitle("Mental distress/disorder vs Satisfaction with life") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Plot relationship between everyday discrimination and life satisfaction
ggplot(my_data, aes(x = EVERYDAY_I, y = LIFESAT_I)) +
geom_point() +
geom_smooth(se = FALSE, method = 'lm', formula = 'y ~ x', color="red") +
geom_smooth(method = 'loess', color = "blue", formula = 'y ~ x') +
labs(x = "Everyday discrimination", y = "Satisfaction with life") +
ggtitle("Everyday discrimination vs Satisfaction with life") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Fit a linear regression model to assess the relationship between LIFESAT_I (life satisfaction) and KESSLER6_I (Kessler Psychological Distress Scale) variables.
model1 <- lm(LIFESAT_I ~ KESSLER6_I, data = my_data)
summary(model1)
library(modelr)
# Plotting residuals against mental distress/disorder
my_data %>%
add_residuals(model1, "resid") %>%
ggplot(aes(x = KESSLER6_I)) +
geom_point(aes(y = resid), alpha = 0.35) +
labs(x = "Mental distress/disorder", y = "Residuals") +
ggtitle("Mental distress/disorder vs Residuals") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Add residuals to the dataset from model1
my_data %>%
add_residuals(model1, "resid") %>%
# Create a ggplot with residuals for a QQ plot
ggplot(aes(sample=resid)) +
# Add a QQ plot using geom_qq()
geom_qq() +
# Set the title of the plot
ggtitle("QQPlot") +
# Apply a minimal theme to the plot
theme_minimal() +
# Center the plot title
theme(plot.title = element_text(hjust = 0.5))
# Add residuals to the dataset from model1 and filter out residuals less than or equal to 4
my_data <- my_data %>%
add_residuals(model1, "resid") %>%
filter(resid <= 4)
# Fit a new linear regression model using lm() function with filtered data
new_model1 <- lm(LIFESAT_I ~ KESSLER6_I, data = my_data)
# Summary of the new linear regression model
summary(new_model1)
# Add residuals from the new linear regression model (new_model1) to the dataset my_data
# Then, create a scatter plot to visualize the relationship between KESSLER6_I (mental distress/disorder) and residuals
my_data %>%
add_residuals(new_model1, "resid") %>%  # Adding residuals from new_model1 to my_data
ggplot(aes(x = KESSLER6_I)) +  # Setting x-axis to KESSLER6_I
geom_point(aes(y = resid), alpha = 0.35) +  # Adding scatter plot with residuals on y-axis
labs(x = "Mental distress/disorder", y = "Residuals") +  # Adding labels to axes
ggtitle("Mental distress/disorder vs Residuals") +  # Adding title to the plot
theme_minimal() +  # Applying minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centering the title
# Add residuals to my_data using new_model1 and name the new column "resid"
my_data %>%
add_residuals(new_model1, "resid") %>%
# Create a QQ plot of the residuals
ggplot(aes(sample=resid)) +
geom_qq() +  # Add QQ plot
ggtitle("QQ Plot") +  # Set plot title
theme_minimal() +  # Set minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Center plot title
# Plotting the relationship between Social well-being (SOCIALWB_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = SOCIALWB_I)) +  # X-axis: Social well-being
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Social well-being", y = "Residuals") +  # Labels for axes
ggtitle("Social well-being vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Non-affirmation of gender identity (NONAFFIRM_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = NONAFFIRM_I)) +  # X-axis: Non-affirmation of gender identity
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Non-affirmation of gender identity", y = "Residuals") +  # Labels for axes
ggtitle("Non-affirmation of gender identity vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Non-disclosure of gender identity (NONDISCLOSURE_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = NONDISCLOSURE_I)) +  # X-axis: Non-disclosure of gender identity
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Non-disclosure of gender identity", y = "Residuals") +  # Labels for axes
ggtitle("Non-disclosure of gender identity vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Healthcare stereotype threat (HCTHREAT_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = HCTHREAT_I)) +  # X-axis: Healthcare stereotype threat
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Healthcare stereotype threat", y = "Residuals") +  # Labels for axes
ggtitle("Healthcare stereotype threat vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Plotting the relationship between Everyday discrimination (EVERYDAY_I) and Residuals
my_data %>%
# Adding residuals from the new_model1 to the dataset
add_residuals(new_model1, "resid") %>%
ggplot(aes(x = EVERYDAY_I)) +  # X-axis: Everyday discrimination
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
geom_smooth(aes(y = resid), color = "blue", method = 'loess', formula = 'y ~ x') +  # Loess smoothing line
geom_smooth(aes(y = resid), method = "lm", se = FALSE, formula = 'y ~ x', color = "red") +  # Linear regression line
labs(x = "Everyday discrimination", y = "Residuals") +  # Labels for axes
ggtitle("Everyday discrimination vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Fit a linear regression model using lm() function
model2 <- lm(LIFESAT_I ~ KESSLER6_I + SOCIALWB_I, data = my_data)
# Summary of the linear regression model
summary(model2)
# Plotting the relationship between the combination of Mental distress/disorder (KESSLER6_I) and Social well-being (SOCIALWB_I) and Residuals
my_data %>%
# Adding residuals from model2 to the dataset
add_residuals(model2, "resid") %>%
ggplot(aes(x = KESSLER6_I + SOCIALWB_I)) +  # X-axis: Combination of Mental distress/disorder and Social well-being
geom_point(aes(y = resid), alpha = 0.35) +  # Scatter plot of residuals
labs(x = "Mental distress/disorder + Social well-being", y = "Residuals") +  # Labels for axes
ggtitle("Mental distress/disorder + Social well-being vs Residuals") +  # Title for the plot
theme_minimal() +  # Minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centered title
# Creating a QQ plot to assess the normality of residuals from model2
my_data %>%
# Adding residuals from model2 to the dataset
add_residuals(model2, "resid") %>%
ggplot(aes(sample=resid)) +  # Q-Q plot with residuals as sample
geom_qq() +  # Adding the quantile-quantile plot
ggtitle("QQPlot") +  # Title for the plot
theme_minimal() +  # Applying a minimal theme
theme(plot.title = element_text(hjust = 0.5))  # Centering the title
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
suppressPackageStartupMessages(library(dplyr))  # Suppress library startup messages
library(ggplot2)  # Load ggplot2 library
# Load the dataset
load("37938-0001-Data.rda")
my_data <- da37938.0001  # Assign dataset to my_data variable
# Recode race categories for clarity
my_data <- my_data %>%
mutate(RACE = recode(RACE,
"(1) Asian" = "Asian",
"(2) Black/AA" = "Black",
"(3) Hispanic/Latino" = "Hispanic",
"(4) Middle Eastern" = "Middle Eastern",
"(5) Native Hawaiian/Pacific Islander" = "Native Hawaiian",
"(6) White" = "White",
"(7) American Indian" = "American Indian",
"(8) Multirace" = "Multirace",
"(9) Other" = "Other"))
# Calculate unweighted proportions by race
unweighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = n()) %>%
mutate(Type = "Unweighted", prop = count / sum(count))
# Calculate weighted proportions by race
weighted_props <- my_data %>%
group_by(RACE) %>%
summarize(count = sum(WEIGHT)) %>%
mutate(Type = "Weighted", prop = count / sum(my_data$WEIGHT))
# Combine unweighted and weighted proportions
combined_props <- bind_rows(unweighted_props, weighted_props)
# Create a bar plot showing proportions by race/ethnicity
ggplot(combined_props, aes(x = RACE, y = prop, fill = Type)) +
geom_col(position = position_dodge()) +  # Plot bars with dodge positioning
ggtitle("Proportions by Race/Ethnicity") +  # Set plot title
xlab("Race/Ethnicity") +  # Set x-axis label
ylab("Proportion") +  # Set y-axis label
theme_minimal() +  # Set minimal theme for the plot
theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
plot.title = element_text(hjust = 0.5))  # Center plot title
